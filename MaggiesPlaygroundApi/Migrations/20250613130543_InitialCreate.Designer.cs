// <auto-generated />
using System;
using MaggiesPlaygroundApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MaggiesPlaygroundApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250613130543_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<int>("ClientTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasKey("ClientId");

                    b.HasIndex("ClientTypeId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.ClientType", b =>
                {
                    b.Property<int>("ClientTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("ClientTypeId");

                    b.ToTable("ClientTypes");
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenderId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("GenderId");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            GenderId = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Male",
                            EnteredBy = "System",
                            Name = "Male"
                        },
                        new
                        {
                            GenderId = 2,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Female",
                            EnteredBy = "System",
                            Name = "Female"
                        },
                        new
                        {
                            GenderId = 3,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Other/Unspecified",
                            EnteredBy = "System",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<int>("PersonTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Prefix")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<int>("RaceId")
                        .HasColumnType("integer");

                    b.Property<string>("Suffix")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("PersonId");

                    b.HasIndex("GenderId");

                    b.HasIndex("PersonTypeId");

                    b.HasIndex("RaceId");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Alias = "jsmith",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "John",
                            GenderId = 1,
                            LastName = "Smith",
                            MiddleName = "A",
                            PersonTypeId = 1,
                            RaceId = 1
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Alias = "ejohnson",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1985, 2, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Emily",
                            GenderId = 2,
                            LastName = "Johnson",
                            MiddleName = "B",
                            PersonTypeId = 2,
                            RaceId = 2
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Alias = "mwilliams",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1978, 3, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Michael",
                            GenderId = 1,
                            LastName = "Williams",
                            MiddleName = "C",
                            PersonTypeId = 3,
                            RaceId = 3
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Alias = "sbrown",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1992, 4, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Sarah",
                            GenderId = 2,
                            LastName = "Brown",
                            MiddleName = "D",
                            PersonTypeId = 4,
                            RaceId = 4
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Alias = "djones",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1980, 5, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "David",
                            GenderId = 1,
                            LastName = "Jones",
                            MiddleName = "E",
                            PersonTypeId = 1,
                            RaceId = 5
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Alias = "jgarcia",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1995, 6, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Jessica",
                            GenderId = 2,
                            LastName = "Garcia",
                            MiddleName = "F",
                            PersonTypeId = 2,
                            RaceId = 6
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Alias = "cmiller",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1988, 7, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Chris",
                            GenderId = 1,
                            LastName = "Miller",
                            MiddleName = "G",
                            PersonTypeId = 3,
                            RaceId = 1
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Alias = "adavis",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1991, 8, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Ashley",
                            GenderId = 2,
                            LastName = "Davis",
                            MiddleName = "H",
                            PersonTypeId = 4,
                            RaceId = 2
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Alias = "mmartinez",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1983, 9, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Matthew",
                            GenderId = 1,
                            LastName = "Martinez",
                            MiddleName = "I",
                            PersonTypeId = 1,
                            RaceId = 3
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Alias = "ahernandez",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1993, 10, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Amanda",
                            GenderId = 2,
                            LastName = "Hernandez",
                            MiddleName = "J",
                            PersonTypeId = 2,
                            RaceId = 4
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000011"),
                            Alias = "jlopez",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1987, 11, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Joshua",
                            GenderId = 1,
                            LastName = "Lopez",
                            MiddleName = "K",
                            PersonTypeId = 3,
                            RaceId = 5
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000012"),
                            Alias = "bgonzalez",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1996, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Brittany",
                            GenderId = 2,
                            LastName = "Gonzalez",
                            MiddleName = "L",
                            PersonTypeId = 4,
                            RaceId = 6
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000050"),
                            Alias = "tyoung",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1990, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Taylor",
                            GenderId = 3,
                            LastName = "Young",
                            MiddleName = "AX",
                            PersonTypeId = 2,
                            RaceId = 2
                        });
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.PersonType", b =>
                {
                    b.Property<int>("PersonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonTypeId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClientId1")
                        .HasColumnType("uuid");

                    b.Property<bool>("ClientOption")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("PersonTypeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientId1");

                    b.ToTable("PersonTypes");

                    b.HasData(
                        new
                        {
                            PersonTypeId = 1,
                            ClientOption = false,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Employee",
                            EnteredBy = "System",
                            Name = "Employee"
                        },
                        new
                        {
                            PersonTypeId = 2,
                            ClientOption = false,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Contractor",
                            EnteredBy = "System",
                            Name = "Contractor"
                        },
                        new
                        {
                            PersonTypeId = 3,
                            ClientOption = false,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Customer",
                            EnteredBy = "System",
                            Name = "Customer"
                        },
                        new
                        {
                            PersonTypeId = 4,
                            ClientOption = false,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Vendor",
                            EnteredBy = "System",
                            Name = "Vendor"
                        });
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RaceId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("RaceId");

                    b.ToTable("Races");

                    b.HasData(
                        new
                        {
                            RaceId = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "White",
                            EnteredBy = "System",
                            Name = "White"
                        },
                        new
                        {
                            RaceId = 2,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Black or African American",
                            EnteredBy = "System",
                            Name = "Black or African American"
                        },
                        new
                        {
                            RaceId = 3,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Asian",
                            EnteredBy = "System",
                            Name = "Asian"
                        },
                        new
                        {
                            RaceId = 4,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Native American or Alaska Native",
                            EnteredBy = "System",
                            Name = "Native American"
                        },
                        new
                        {
                            RaceId = 5,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Native Hawaiian or Other Pacific Islander",
                            EnteredBy = "System",
                            Name = "Pacific Islander"
                        },
                        new
                        {
                            RaceId = 6,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Other/Unspecified",
                            EnteredBy = "System",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.Client", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.ClientType", null)
                        .WithMany()
                        .HasForeignKey("ClientTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.Person", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaggiesPlaygroundApi.Models.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaggiesPlaygroundApi.Models.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("PersonType");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.PersonType", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MaggiesPlaygroundApi.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId1");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaggiesPlaygroundApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
