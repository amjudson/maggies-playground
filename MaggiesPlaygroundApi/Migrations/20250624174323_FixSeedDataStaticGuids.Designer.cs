// <auto-generated />
using System;
using MaggiesPlaygroundApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MaggiesPlaygroundApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250624174323_FixSeedDataStaticGuids")]
    partial class FixSeedDataStaticGuids
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("AddressTypeId1")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<int?>("StateId1")
                        .HasColumnType("integer");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.HasKey("AddressId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("AddressTypeId1");

                    b.HasIndex("StateId");

                    b.HasIndex("StateId1");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000001"),
                            AddressLine1 = "6713 Washington Blvd",
                            AddressTypeId = 2,
                            City = "San Diego",
                            StateId = 27,
                            Zip = "25159"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000002"),
                            AddressLine1 = "5177 Lincoln Ave",
                            AddressLine2 = "Apt 381",
                            AddressTypeId = 3,
                            City = "Virginia Beach",
                            StateId = 12,
                            Zip = "33158"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000003"),
                            AddressLine1 = "2676 Autumn Ln",
                            AddressLine2 = "Apt 91",
                            AddressTypeId = 2,
                            City = "Los Angeles",
                            StateId = 41,
                            Zip = "61947"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000004"),
                            AddressLine1 = "7080 Blackberry Dr",
                            AddressTypeId = 1,
                            City = "Milwaukee",
                            StateId = 3,
                            Zip = "74003"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000005"),
                            AddressLine1 = "6955 Autumn Ln",
                            AddressTypeId = 3,
                            City = "Austin",
                            StateId = 3,
                            Zip = "37737"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000006"),
                            AddressLine1 = "139 Cherry St",
                            AddressLine2 = "Apt 51",
                            AddressTypeId = 1,
                            City = "Minneapolis",
                            StateId = 38,
                            Zip = "44611"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000007"),
                            AddressLine1 = "7837 Berry Ave",
                            AddressTypeId = 2,
                            City = "San Antonio",
                            StateId = 13,
                            Zip = "79518"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000008"),
                            AddressLine1 = "1521 Oak Ave",
                            AddressTypeId = 3,
                            City = "Fresno",
                            StateId = 26,
                            Zip = "14571"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000009"),
                            AddressLine1 = "6321 Lake Dr",
                            AddressTypeId = 1,
                            City = "New York",
                            StateId = 19,
                            Zip = "34069"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000010"),
                            AddressLine1 = "802 Summer Ave",
                            AddressTypeId = 3,
                            City = "New York",
                            StateId = 40,
                            Zip = "49526"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000011"),
                            AddressLine1 = "188 Cranberry Ln",
                            AddressLine2 = "Apt 913",
                            AddressTypeId = 4,
                            City = "New York",
                            StateId = 1,
                            Zip = "15739"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000012"),
                            AddressLine1 = "9295 Summer Ave",
                            AddressLine2 = "Apt 437",
                            AddressTypeId = 2,
                            City = "El Paso",
                            StateId = 31,
                            Zip = "13999"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000013"),
                            AddressLine1 = "7942 Cherry St",
                            AddressTypeId = 3,
                            City = "Nashville",
                            StateId = 15,
                            Zip = "91653"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000014"),
                            AddressLine1 = "292 Elderberry Ave",
                            AddressLine2 = "Apt 452",
                            AddressTypeId = 1,
                            City = "Aurora",
                            StateId = 17,
                            Zip = "73962"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000015"),
                            AddressLine1 = "3398 Raspberry Ave",
                            AddressTypeId = 3,
                            City = "Dallas",
                            StateId = 7,
                            Zip = "29409"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000016"),
                            AddressLine1 = "9870 Strawberry St",
                            AddressTypeId = 3,
                            City = "Atlanta",
                            StateId = 36,
                            Zip = "36052"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000017"),
                            AddressLine1 = "6542 Oak Ave",
                            AddressLine2 = "Apt 39",
                            AddressTypeId = 2,
                            City = "Washington",
                            StateId = 47,
                            Zip = "12442"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000018"),
                            AddressLine1 = "2239 Plum St",
                            AddressLine2 = "Apt 321",
                            AddressTypeId = 1,
                            City = "Detroit",
                            StateId = 5,
                            Zip = "99413"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000019"),
                            AddressLine1 = "3305 Strawberry St",
                            AddressTypeId = 5,
                            City = "Tulsa",
                            StateId = 1,
                            Zip = "13787"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000020"),
                            AddressLine1 = "2456 Currant St",
                            AddressTypeId = 4,
                            City = "Arlington",
                            StateId = 14,
                            Zip = "59080"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000021"),
                            AddressLine1 = "2003 Sunset Blvd",
                            AddressTypeId = 5,
                            City = "Austin",
                            StateId = 2,
                            Zip = "30776"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000022"),
                            AddressLine1 = "7837 Maple Dr",
                            AddressTypeId = 3,
                            City = "New Orleans",
                            StateId = 10,
                            Zip = "36529"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000023"),
                            AddressLine1 = "7152 Maple Dr",
                            AddressTypeId = 3,
                            City = "Fresno",
                            StateId = 20,
                            Zip = "89283"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000024"),
                            AddressLine1 = "9640 Summer Ave",
                            AddressLine2 = "Apt 3",
                            AddressTypeId = 1,
                            City = "Milwaukee",
                            StateId = 48,
                            Zip = "82930"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000025"),
                            AddressLine1 = "1900 Mulberry Ave",
                            AddressLine2 = "Apt 910",
                            AddressTypeId = 3,
                            City = "Raleigh",
                            StateId = 21,
                            Zip = "63171"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000026"),
                            AddressLine1 = "9641 Gooseberry Rd",
                            AddressTypeId = 4,
                            City = "San Jose",
                            StateId = 17,
                            Zip = "58798"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000027"),
                            AddressLine1 = "8240 Blueberry Rd",
                            AddressLine2 = "Apt 888",
                            AddressTypeId = 5,
                            City = "San Francisco",
                            StateId = 17,
                            Zip = "57303"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000028"),
                            AddressLine1 = "6677 Park St",
                            AddressLine2 = "Apt 421",
                            AddressTypeId = 4,
                            City = "San Francisco",
                            StateId = 12,
                            Zip = "85025"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000029"),
                            AddressLine1 = "8070 Elderberry Ave",
                            AddressTypeId = 3,
                            City = "Omaha",
                            StateId = 48,
                            Zip = "94878"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000030"),
                            AddressLine1 = "9694 Washington Blvd",
                            AddressTypeId = 3,
                            City = "Tucson",
                            StateId = 11,
                            Zip = "67084"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000031"),
                            AddressLine1 = "1199 Blackberry Dr",
                            AddressTypeId = 2,
                            City = "Washington",
                            StateId = 27,
                            Zip = "74861"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000032"),
                            AddressLine1 = "7906 Peach Rd",
                            AddressLine2 = "Apt 314",
                            AddressTypeId = 1,
                            City = "Jacksonville",
                            StateId = 47,
                            Zip = "14706"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000033"),
                            AddressLine1 = "1797 Valley Ave",
                            AddressTypeId = 2,
                            City = "San Francisco",
                            StateId = 45,
                            Zip = "52303"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000034"),
                            AddressLine1 = "7656 Orange Ln",
                            AddressLine2 = "Apt 938",
                            AddressTypeId = 2,
                            City = "Honolulu",
                            StateId = 18,
                            Zip = "87089"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000035"),
                            AddressLine1 = "5970 Plum St",
                            AddressTypeId = 3,
                            City = "El Paso",
                            StateId = 48,
                            Zip = "17067"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000036"),
                            AddressLine1 = "3192 Currant St",
                            AddressTypeId = 2,
                            City = "New Orleans",
                            StateId = 45,
                            Zip = "11485"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000037"),
                            AddressLine1 = "284 Gooseberry Rd",
                            AddressLine2 = "Apt 940",
                            AddressTypeId = 5,
                            City = "Detroit",
                            StateId = 34,
                            Zip = "68997"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000038"),
                            AddressLine1 = "7546 Oak Ave",
                            AddressTypeId = 4,
                            City = "Washington",
                            StateId = 33,
                            Zip = "13833"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000039"),
                            AddressLine1 = "3712 Forest Ln",
                            AddressLine2 = "Apt 665",
                            AddressTypeId = 4,
                            City = "Fort Worth",
                            StateId = 31,
                            Zip = "67930"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000040"),
                            AddressLine1 = "1085 Maple Dr",
                            AddressLine2 = "Apt 579",
                            AddressTypeId = 2,
                            City = "Arlington",
                            StateId = 15,
                            Zip = "98103"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000041"),
                            AddressLine1 = "3574 Washington Blvd",
                            AddressLine2 = "Apt 656",
                            AddressTypeId = 5,
                            City = "Austin",
                            StateId = 33,
                            Zip = "19768"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000042"),
                            AddressLine1 = "2068 Grape Dr",
                            AddressTypeId = 4,
                            City = "Kansas City",
                            StateId = 44,
                            Zip = "42060"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000043"),
                            AddressLine1 = "4342 Park St",
                            AddressTypeId = 4,
                            City = "Oakland",
                            StateId = 28,
                            Zip = "58378"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000044"),
                            AddressLine1 = "6580 Huckleberry Dr",
                            AddressTypeId = 3,
                            City = "Colorado Springs",
                            StateId = 12,
                            Zip = "38022"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000045"),
                            AddressLine1 = "6967 Sunset Blvd",
                            AddressTypeId = 5,
                            City = "Tucson",
                            StateId = 38,
                            Zip = "50636"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000046"),
                            AddressLine1 = "8607 Oak Ave",
                            AddressTypeId = 3,
                            City = "Detroit",
                            StateId = 22,
                            Zip = "24728"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000047"),
                            AddressLine1 = "117 Mulberry Ave",
                            AddressTypeId = 4,
                            City = "Portland",
                            StateId = 16,
                            Zip = "53581"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000048"),
                            AddressLine1 = "1045 Park St",
                            AddressTypeId = 5,
                            City = "Oakland",
                            StateId = 24,
                            Zip = "91645"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000049"),
                            AddressLine1 = "2163 Mulberry Ave",
                            AddressTypeId = 5,
                            City = "New Orleans",
                            StateId = 32,
                            Zip = "67584"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000050"),
                            AddressLine1 = "3313 Elm St",
                            AddressTypeId = 5,
                            City = "San Antonio",
                            StateId = 46,
                            Zip = "66296"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000051"),
                            AddressLine1 = "1624 Garden St",
                            AddressTypeId = 1,
                            City = "San Diego",
                            StateId = 19,
                            Zip = "19850"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000052"),
                            AddressLine1 = "314 River Rd",
                            AddressTypeId = 2,
                            City = "Cleveland",
                            StateId = 42,
                            Zip = "84320"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000053"),
                            AddressLine1 = "1375 Raspberry Ave",
                            AddressTypeId = 1,
                            City = "Indianapolis",
                            StateId = 28,
                            Zip = "14516"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000054"),
                            AddressLine1 = "1031 Cherry St",
                            AddressTypeId = 5,
                            City = "Oakland",
                            StateId = 27,
                            Zip = "74790"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000055"),
                            AddressLine1 = "8908 Forest Ln",
                            AddressTypeId = 5,
                            City = "Nashville",
                            StateId = 43,
                            Zip = "81563"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000056"),
                            AddressLine1 = "8130 Orange Ln",
                            AddressLine2 = "Apt 712",
                            AddressTypeId = 5,
                            City = "Phoenix",
                            StateId = 40,
                            Zip = "94110"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000057"),
                            AddressLine1 = "9665 Blackberry Dr",
                            AddressLine2 = "Apt 820",
                            AddressTypeId = 1,
                            City = "Minneapolis",
                            StateId = 23,
                            Zip = "91611"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000058"),
                            AddressLine1 = "3667 Peach Rd",
                            AddressTypeId = 5,
                            City = "Cleveland",
                            StateId = 46,
                            Zip = "15388"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000059"),
                            AddressLine1 = "8514 Meadow Ave",
                            AddressTypeId = 5,
                            City = "Philadelphia",
                            StateId = 49,
                            Zip = "21870"
                        },
                        new
                        {
                            AddressId = new Guid("00000000-0000-0000-0000-000000000060"),
                            AddressLine1 = "9686 Oak Ave",
                            AddressLine2 = "Apt 746",
                            AddressTypeId = 1,
                            City = "Albuquerque",
                            StateId = 33,
                            Zip = "38588"
                        });
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.AddressType", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddressTypeId"));

                    b.Property<string>("ClientId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<bool>("ClientOption")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("AddressTypeId");

                    b.ToTable("AddressTypes");

                    b.HasData(
                        new
                        {
                            AddressTypeId = 1,
                            ClientOption = false,
                            Description = "Home address",
                            Name = "Home"
                        },
                        new
                        {
                            AddressTypeId = 2,
                            ClientOption = false,
                            Description = "Work address",
                            Name = "Work"
                        },
                        new
                        {
                            AddressTypeId = 3,
                            ClientOption = false,
                            Description = "Billing address",
                            Name = "Billing"
                        },
                        new
                        {
                            AddressTypeId = 4,
                            ClientOption = false,
                            Description = "Shipping address",
                            Name = "Shipping"
                        },
                        new
                        {
                            AddressTypeId = 5,
                            ClientOption = false,
                            Description = "Mailing address",
                            Name = "Mailing"
                        });
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<int>("ClientTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasKey("ClientId");

                    b.HasIndex("ClientTypeId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Active = true,
                            ClientName = "Acme Corporation",
                            ClientTypeId = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        },
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Active = true,
                            ClientName = "TechStart Inc",
                            ClientTypeId = 3,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        },
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Active = true,
                            ClientName = "Local Bakery",
                            ClientTypeId = 2,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        },
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Active = true,
                            ClientName = "City Health Department",
                            ClientTypeId = 5,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        },
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Active = true,
                            ClientName = "Green Earth Foundation",
                            ClientTypeId = 4,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        },
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Active = true,
                            ClientName = "Global Industries",
                            ClientTypeId = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        },
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Active = true,
                            ClientName = "Innovate Labs",
                            ClientTypeId = 3,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        },
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Active = true,
                            ClientName = "Family Restaurant",
                            ClientTypeId = 2,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        },
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Active = true,
                            ClientName = "County Education Board",
                            ClientTypeId = 5,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        },
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Active = true,
                            ClientName = "Community Outreach",
                            ClientTypeId = 4,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        },
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000011"),
                            Active = true,
                            ClientName = "MegaCorp International",
                            ClientTypeId = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        },
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000012"),
                            Active = true,
                            ClientName = "Future Tech",
                            ClientTypeId = 3,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        },
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000013"),
                            Active = true,
                            ClientName = "Neighborhood Cafe",
                            ClientTypeId = 2,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        },
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000014"),
                            Active = true,
                            ClientName = "State Transportation",
                            ClientTypeId = 5,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        },
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000015"),
                            Active = true,
                            ClientName = "Youth Development",
                            ClientTypeId = 4,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        },
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000016"),
                            Active = true,
                            ClientName = "Enterprise Solutions",
                            ClientTypeId = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        },
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000017"),
                            Active = true,
                            ClientName = "NextGen Innovations",
                            ClientTypeId = 3,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        },
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000018"),
                            Active = true,
                            ClientName = "Artisan Crafts",
                            ClientTypeId = 2,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        },
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000019"),
                            Active = true,
                            ClientName = "Public Safety",
                            ClientTypeId = 5,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        },
                        new
                        {
                            ClientId = new Guid("00000000-0000-0000-0000-000000000020"),
                            Active = true,
                            ClientName = "Cultural Heritage",
                            ClientTypeId = 4,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System"
                        });
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.ClientAddress", b =>
                {
                    b.Property<Guid>("ClientAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasKey("ClientAddressId");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientAddresses");
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.ClientEmail", b =>
                {
                    b.Property<Guid>("ClientEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("EmailId")
                        .HasColumnType("uuid");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasKey("ClientEmailId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmailId");

                    b.ToTable("ClientEmails");
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.ClientPhone", b =>
                {
                    b.Property<Guid>("ClientPhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<Guid>("PhoneId")
                        .HasColumnType("uuid");

                    b.HasKey("ClientPhoneId");

                    b.HasIndex("ClientId");

                    b.HasIndex("PhoneId");

                    b.ToTable("ClientPhones");
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.ClientType", b =>
                {
                    b.Property<int>("ClientTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("ClientTypeId");

                    b.ToTable("ClientTypes");

                    b.HasData(
                        new
                        {
                            ClientTypeId = 1,
                            Active = true,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            Name = "Corporate"
                        },
                        new
                        {
                            ClientTypeId = 2,
                            Active = true,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            Name = "Small Business"
                        },
                        new
                        {
                            ClientTypeId = 3,
                            Active = true,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            Name = "Startup"
                        },
                        new
                        {
                            ClientTypeId = 4,
                            Active = true,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            Name = "Non-Profit"
                        },
                        new
                        {
                            ClientTypeId = 5,
                            Active = true,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            Name = "Government"
                        });
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.Email", b =>
                {
                    b.Property<Guid>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<int>("EmailTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("EmailTypeId1")
                        .HasColumnType("integer");

                    b.HasKey("EmailId");

                    b.HasIndex("EmailTypeId");

                    b.HasIndex("EmailTypeId1");

                    b.ToTable("Emails");

                    b.HasData(
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000201"),
                            EmailAddress = "kenneth.davis@hotmail.com",
                            EmailTypeId = 3
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000202"),
                            EmailAddress = "david.wilson@services.com",
                            EmailTypeId = 3
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000203"),
                            EmailAddress = "david.hill@aol.com",
                            EmailTypeId = 2
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000204"),
                            EmailAddress = "donald.taylor@company.com",
                            EmailTypeId = 2
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000205"),
                            EmailAddress = "donna.johnson@tech.com",
                            EmailTypeId = 3
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000206"),
                            EmailAddress = "lisa.davis@yahoo.com",
                            EmailTypeId = 4
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000207"),
                            EmailAddress = "edward.clark@gmail.com",
                            EmailTypeId = 4
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000208"),
                            EmailAddress = "william.rivera@consulting.com",
                            EmailTypeId = 3
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000209"),
                            EmailAddress = "barbara.williams@protonmail.com",
                            EmailTypeId = 3
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000210"),
                            EmailAddress = "dorothy.smith@enterprise.com",
                            EmailTypeId = 5
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000211"),
                            EmailAddress = "brian.martin@hotmail.com",
                            EmailTypeId = 1
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000212"),
                            EmailAddress = "patricia.flores@firm.com",
                            EmailTypeId = 1
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000213"),
                            EmailAddress = "joseph.hill@icloud.com",
                            EmailTypeId = 4
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000214"),
                            EmailAddress = "william.williams@firm.com",
                            EmailTypeId = 3
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000215"),
                            EmailAddress = "patricia.perez@services.com",
                            EmailTypeId = 4
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000216"),
                            EmailAddress = "susan.smith@company.com",
                            EmailTypeId = 2
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000217"),
                            EmailAddress = "robert.scott@yahoo.com",
                            EmailTypeId = 3
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000218"),
                            EmailAddress = "james.flores@business.com",
                            EmailTypeId = 3
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000219"),
                            EmailAddress = "sandra.smith@tech.com",
                            EmailTypeId = 1
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000220"),
                            EmailAddress = "james.brown@consulting.com",
                            EmailTypeId = 1
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000221"),
                            EmailAddress = "jason.campbell@corporate.com",
                            EmailTypeId = 2
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000222"),
                            EmailAddress = "andrew.williams@company.com",
                            EmailTypeId = 1
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000223"),
                            EmailAddress = "anthony.flores@enterprise.com",
                            EmailTypeId = 3
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000224"),
                            EmailAddress = "sarah.rivera@organization.com",
                            EmailTypeId = 4
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000225"),
                            EmailAddress = "mary.hall@web.com",
                            EmailTypeId = 2
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000226"),
                            EmailAddress = "kevin.rodriguez@hotmail.com",
                            EmailTypeId = 3
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000227"),
                            EmailAddress = "karen.hill@hotmail.com",
                            EmailTypeId = 1
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000228"),
                            EmailAddress = "richard.robinson@enterprise.com",
                            EmailTypeId = 5
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000229"),
                            EmailAddress = "kimberly.king@services.com",
                            EmailTypeId = 2
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000230"),
                            EmailAddress = "carol.roberts@consulting.com",
                            EmailTypeId = 1
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000231"),
                            EmailAddress = "charles.campbell@gmail.com",
                            EmailTypeId = 2
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000232"),
                            EmailAddress = "jessica.johnson@aol.com",
                            EmailTypeId = 3
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000233"),
                            EmailAddress = "betty.jones@web.com",
                            EmailTypeId = 1
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000234"),
                            EmailAddress = "michael.taylor@protonmail.com",
                            EmailTypeId = 4
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000235"),
                            EmailAddress = "dorothy.smith@gmail.com",
                            EmailTypeId = 5
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000236"),
                            EmailAddress = "nancy.lopez@online.com",
                            EmailTypeId = 5
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000237"),
                            EmailAddress = "thomas.ramirez@firm.com",
                            EmailTypeId = 4
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000238"),
                            EmailAddress = "barbara.anderson@outlook.com",
                            EmailTypeId = 1
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000239"),
                            EmailAddress = "susan.campbell@web.com",
                            EmailTypeId = 4
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000240"),
                            EmailAddress = "william.hall@outlook.com",
                            EmailTypeId = 2
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000241"),
                            EmailAddress = "carol.ramirez@services.com",
                            EmailTypeId = 1
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000242"),
                            EmailAddress = "ruth.martin@digital.com",
                            EmailTypeId = 3
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000243"),
                            EmailAddress = "charles.carter@corporate.com",
                            EmailTypeId = 3
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000244"),
                            EmailAddress = "jeffrey.green@hotmail.com",
                            EmailTypeId = 1
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000245"),
                            EmailAddress = "james.martinez@online.com",
                            EmailTypeId = 4
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000246"),
                            EmailAddress = "matthew.robinson@business.com",
                            EmailTypeId = 1
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000247"),
                            EmailAddress = "jason.carter@digital.com",
                            EmailTypeId = 1
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000248"),
                            EmailAddress = "charles.ramirez@firm.com",
                            EmailTypeId = 5
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000249"),
                            EmailAddress = "dorothy.nguyen@icloud.com",
                            EmailTypeId = 2
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000250"),
                            EmailAddress = "donna.green@aol.com",
                            EmailTypeId = 5
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000251"),
                            EmailAddress = "michelle.martinez@icloud.com",
                            EmailTypeId = 2
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000252"),
                            EmailAddress = "ronald.allen@yahoo.com",
                            EmailTypeId = 3
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000253"),
                            EmailAddress = "edward.hall@solutions.com",
                            EmailTypeId = 5
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000254"),
                            EmailAddress = "jeffrey.white@digital.com",
                            EmailTypeId = 5
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000255"),
                            EmailAddress = "elizabeth.robinson@aol.com",
                            EmailTypeId = 4
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000256"),
                            EmailAddress = "donald.scott@hotmail.com",
                            EmailTypeId = 5
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000257"),
                            EmailAddress = "charles.clark@services.com",
                            EmailTypeId = 2
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000258"),
                            EmailAddress = "donna.flores@organization.com",
                            EmailTypeId = 1
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000259"),
                            EmailAddress = "jeffrey.williams@yahoo.com",
                            EmailTypeId = 2
                        },
                        new
                        {
                            EmailId = new Guid("00000000-0000-0000-0000-000000000260"),
                            EmailAddress = "christopher.rodriguez@icloud.com",
                            EmailTypeId = 2
                        });
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.EmailType", b =>
                {
                    b.Property<int>("EmailTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmailTypeId"));

                    b.Property<string>("ClientId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<bool>("ClientOption")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("EmailTypeId");

                    b.ToTable("EmailTypes");

                    b.HasData(
                        new
                        {
                            EmailTypeId = 1,
                            ClientOption = false,
                            Description = "Personal email address",
                            Name = "Personal"
                        },
                        new
                        {
                            EmailTypeId = 2,
                            ClientOption = false,
                            Description = "Work email address",
                            Name = "Work"
                        },
                        new
                        {
                            EmailTypeId = 3,
                            ClientOption = false,
                            Description = "Business email address",
                            Name = "Business"
                        },
                        new
                        {
                            EmailTypeId = 4,
                            ClientOption = false,
                            Description = "Marketing email address",
                            Name = "Marketing"
                        },
                        new
                        {
                            EmailTypeId = 5,
                            ClientOption = false,
                            Description = "Support email address",
                            Name = "Support"
                        });
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenderId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("GenderId");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            GenderId = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Male",
                            EnteredBy = "System",
                            Name = "Male"
                        },
                        new
                        {
                            GenderId = 2,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Female",
                            EnteredBy = "System",
                            Name = "Female"
                        },
                        new
                        {
                            GenderId = 3,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Other/Unspecified",
                            EnteredBy = "System",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<int>("PersonTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Prefix")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<int>("RaceId")
                        .HasColumnType("integer");

                    b.Property<string>("Suffix")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("PersonId");

                    b.HasIndex("GenderId");

                    b.HasIndex("PersonTypeId");

                    b.HasIndex("RaceId");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000001"),
                            Alias = "jsmith",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "John",
                            GenderId = 1,
                            LastName = "Smith",
                            MiddleName = "A",
                            PersonTypeId = 1,
                            RaceId = 1
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000002"),
                            Alias = "ejohnson",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1985, 2, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Emily",
                            GenderId = 2,
                            LastName = "Johnson",
                            MiddleName = "B",
                            PersonTypeId = 2,
                            RaceId = 2
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000003"),
                            Alias = "mwilliams",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1978, 3, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Michael",
                            GenderId = 1,
                            LastName = "Williams",
                            MiddleName = "C",
                            PersonTypeId = 3,
                            RaceId = 3
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000004"),
                            Alias = "sbrown",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1992, 4, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Sarah",
                            GenderId = 2,
                            LastName = "Brown",
                            MiddleName = "D",
                            PersonTypeId = 4,
                            RaceId = 4
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000005"),
                            Alias = "djones",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1980, 5, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "David",
                            GenderId = 1,
                            LastName = "Jones",
                            MiddleName = "E",
                            PersonTypeId = 1,
                            RaceId = 5
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000006"),
                            Alias = "jgarcia",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1995, 6, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Jessica",
                            GenderId = 2,
                            LastName = "Garcia",
                            MiddleName = "F",
                            PersonTypeId = 2,
                            RaceId = 6
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000007"),
                            Alias = "cmiller",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1988, 7, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Chris",
                            GenderId = 1,
                            LastName = "Miller",
                            MiddleName = "G",
                            PersonTypeId = 3,
                            RaceId = 1
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000008"),
                            Alias = "adavis",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1991, 8, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Ashley",
                            GenderId = 2,
                            LastName = "Davis",
                            MiddleName = "H",
                            PersonTypeId = 4,
                            RaceId = 2
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000009"),
                            Alias = "mmartinez",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1983, 9, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Matthew",
                            GenderId = 1,
                            LastName = "Martinez",
                            MiddleName = "I",
                            PersonTypeId = 1,
                            RaceId = 3
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000010"),
                            Alias = "ahernandez",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1993, 10, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Amanda",
                            GenderId = 2,
                            LastName = "Hernandez",
                            MiddleName = "J",
                            PersonTypeId = 2,
                            RaceId = 4
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000011"),
                            Alias = "jlopez",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1987, 11, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Joshua",
                            GenderId = 1,
                            LastName = "Lopez",
                            MiddleName = "K",
                            PersonTypeId = 3,
                            RaceId = 5
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000012"),
                            Alias = "bgonzalez",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1996, 12, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Brittany",
                            GenderId = 2,
                            LastName = "Gonzalez",
                            MiddleName = "L",
                            PersonTypeId = 4,
                            RaceId = 6
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000013"),
                            Alias = "rwilson",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1982, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Robert",
                            GenderId = 1,
                            LastName = "Wilson",
                            MiddleName = "M",
                            PersonTypeId = 1,
                            RaceId = 1
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000014"),
                            Alias = "janderson",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1994, 2, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Jennifer",
                            GenderId = 2,
                            LastName = "Anderson",
                            MiddleName = "N",
                            PersonTypeId = 2,
                            RaceId = 2
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000015"),
                            Alias = "dthomas",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1979, 3, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Daniel",
                            GenderId = 1,
                            LastName = "Thomas",
                            MiddleName = "O",
                            PersonTypeId = 3,
                            RaceId = 3
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000016"),
                            Alias = "ltaylor",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1991, 4, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Lisa",
                            GenderId = 2,
                            LastName = "Taylor",
                            MiddleName = "P",
                            PersonTypeId = 4,
                            RaceId = 4
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000017"),
                            Alias = "jmoore",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1985, 5, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "James",
                            GenderId = 1,
                            LastName = "Moore",
                            MiddleName = "Q",
                            PersonTypeId = 1,
                            RaceId = 5
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000018"),
                            Alias = "mjackson",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1993, 6, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Michelle",
                            GenderId = 2,
                            LastName = "Jackson",
                            MiddleName = "R",
                            PersonTypeId = 2,
                            RaceId = 6
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000019"),
                            Alias = "amartin",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1987, 7, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Andrew",
                            GenderId = 1,
                            LastName = "Martin",
                            MiddleName = "S",
                            PersonTypeId = 3,
                            RaceId = 1
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000020"),
                            Alias = "slee",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1990, 8, 22, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Stephanie",
                            GenderId = 2,
                            LastName = "Lee",
                            MiddleName = "T",
                            PersonTypeId = 4,
                            RaceId = 2
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000021"),
                            Alias = "kthompson",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1984, 9, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Kevin",
                            GenderId = 1,
                            LastName = "Thompson",
                            MiddleName = "U",
                            PersonTypeId = 1,
                            RaceId = 3
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000022"),
                            Alias = "nwhite",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1992, 10, 24, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Nicole",
                            GenderId = 2,
                            LastName = "White",
                            MiddleName = "V",
                            PersonTypeId = 2,
                            RaceId = 4
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000023"),
                            Alias = "bharris",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1986, 11, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Brian",
                            GenderId = 1,
                            LastName = "Harris",
                            MiddleName = "W",
                            PersonTypeId = 3,
                            RaceId = 5
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000024"),
                            Alias = "rclark",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1994, 12, 26, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Rachel",
                            GenderId = 2,
                            LastName = "Clark",
                            MiddleName = "X",
                            PersonTypeId = 4,
                            RaceId = 6
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000025"),
                            Alias = "slewis",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1983, 1, 27, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Steven",
                            GenderId = 1,
                            LastName = "Lewis",
                            MiddleName = "Y",
                            PersonTypeId = 1,
                            RaceId = 1
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000026"),
                            Alias = "mrobinson",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1991, 2, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Melissa",
                            GenderId = 2,
                            LastName = "Robinson",
                            MiddleName = "Z",
                            PersonTypeId = 2,
                            RaceId = 2
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000027"),
                            Alias = "twalker",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1988, 3, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Timothy",
                            GenderId = 1,
                            LastName = "Walker",
                            MiddleName = "AA",
                            PersonTypeId = 3,
                            RaceId = 3
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000028"),
                            Alias = "kyoung",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1993, 4, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Kimberly",
                            GenderId = 2,
                            LastName = "Young",
                            MiddleName = "AB",
                            PersonTypeId = 4,
                            RaceId = 4
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000029"),
                            Alias = "rallen",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1985, 5, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Richard",
                            GenderId = 1,
                            LastName = "Allen",
                            MiddleName = "AC",
                            PersonTypeId = 1,
                            RaceId = 5
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000030"),
                            Alias = "lking",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1990, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Laura",
                            GenderId = 2,
                            LastName = "King",
                            MiddleName = "AD",
                            PersonTypeId = 2,
                            RaceId = 6
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000031"),
                            Alias = "cwright",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1987, 7, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Charles",
                            GenderId = 1,
                            LastName = "Wright",
                            MiddleName = "AE",
                            PersonTypeId = 3,
                            RaceId = 1
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000032"),
                            Alias = "hscott",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1992, 8, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Heather",
                            GenderId = 2,
                            LastName = "Scott",
                            MiddleName = "AF",
                            PersonTypeId = 4,
                            RaceId = 2
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000033"),
                            Alias = "jgreen",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1984, 9, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Joseph",
                            GenderId = 1,
                            LastName = "Green",
                            MiddleName = "AG",
                            PersonTypeId = 1,
                            RaceId = 3
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000034"),
                            Alias = "ebaker",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1991, 10, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Elizabeth",
                            GenderId = 2,
                            LastName = "Baker",
                            MiddleName = "AH",
                            PersonTypeId = 2,
                            RaceId = 4
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000035"),
                            Alias = "tadams",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1986, 11, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Thomas",
                            GenderId = 1,
                            LastName = "Adams",
                            MiddleName = "AI",
                            PersonTypeId = 3,
                            RaceId = 5
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000036"),
                            Alias = "cnelson",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1993, 12, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Christine",
                            GenderId = 2,
                            LastName = "Nelson",
                            MiddleName = "AJ",
                            PersonTypeId = 4,
                            RaceId = 6
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000037"),
                            Alias = "pcarter",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1985, 1, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Paul",
                            GenderId = 1,
                            LastName = "Carter",
                            MiddleName = "AK",
                            PersonTypeId = 1,
                            RaceId = 1
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000038"),
                            Alias = "smitchell",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1990, 2, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Samantha",
                            GenderId = 2,
                            LastName = "Mitchell",
                            MiddleName = "AL",
                            PersonTypeId = 2,
                            RaceId = 2
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000039"),
                            Alias = "mperez",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1987, 3, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Mark",
                            GenderId = 1,
                            LastName = "Perez",
                            MiddleName = "AM",
                            PersonTypeId = 3,
                            RaceId = 3
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000040"),
                            Alias = "proberts",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1992, 4, 11, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Patricia",
                            GenderId = 2,
                            LastName = "Roberts",
                            MiddleName = "AN",
                            PersonTypeId = 4,
                            RaceId = 4
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000041"),
                            Alias = "dturner",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1985, 5, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Donald",
                            GenderId = 1,
                            LastName = "Turner",
                            MiddleName = "AO",
                            PersonTypeId = 1,
                            RaceId = 5
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000042"),
                            Alias = "nphillips",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1991, 6, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Nancy",
                            GenderId = 2,
                            LastName = "Phillips",
                            MiddleName = "AP",
                            PersonTypeId = 2,
                            RaceId = 6
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000043"),
                            Alias = "gcampbell",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1986, 7, 14, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "George",
                            GenderId = 1,
                            LastName = "Campbell",
                            MiddleName = "AQ",
                            PersonTypeId = 3,
                            RaceId = 1
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000044"),
                            Alias = "kparker",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1993, 8, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Karen",
                            GenderId = 2,
                            LastName = "Parker",
                            MiddleName = "AR",
                            PersonTypeId = 4,
                            RaceId = 2
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000045"),
                            Alias = "eevans",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1984, 9, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Edward",
                            GenderId = 1,
                            LastName = "Evans",
                            MiddleName = "AS",
                            PersonTypeId = 1,
                            RaceId = 3
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000046"),
                            Alias = "bedwards",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1990, 10, 17, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Betty",
                            GenderId = 2,
                            LastName = "Edwards",
                            MiddleName = "AT",
                            PersonTypeId = 2,
                            RaceId = 4
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000047"),
                            Alias = "wcollins",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1987, 11, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "William",
                            GenderId = 1,
                            LastName = "Collins",
                            MiddleName = "AU",
                            PersonTypeId = 3,
                            RaceId = 5
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000048"),
                            Alias = "hstewart",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1992, 12, 19, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Helen",
                            GenderId = 2,
                            LastName = "Stewart",
                            MiddleName = "AV",
                            PersonTypeId = 4,
                            RaceId = 6
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000049"),
                            Alias = "rsanchez",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1985, 1, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Ronald",
                            GenderId = 1,
                            LastName = "Sanchez",
                            MiddleName = "AW",
                            PersonTypeId = 1,
                            RaceId = 1
                        },
                        new
                        {
                            PersonId = new Guid("00000000-0000-0000-0000-000000000050"),
                            Alias = "mmorris",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1990, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            EnteredBy = "System",
                            FirstName = "Margaret",
                            GenderId = 3,
                            LastName = "Morris",
                            MiddleName = "AX",
                            PersonTypeId = 2,
                            RaceId = 2
                        });
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.PersonAddress", b =>
                {
                    b.Property<Guid>("PersonAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.HasKey("PersonAddressId");

                    b.HasIndex("AddressId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAddresses");
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.PersonEmail", b =>
                {
                    b.Property<Guid>("PersonEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("EmailId")
                        .HasColumnType("uuid");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.HasKey("PersonEmailId");

                    b.HasIndex("EmailId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonEmails");
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.PersonPhone", b =>
                {
                    b.Property<Guid>("PersonPhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PhoneId")
                        .HasColumnType("uuid");

                    b.HasKey("PersonPhoneId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PhoneId");

                    b.ToTable("PersonPhones");
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.PersonType", b =>
                {
                    b.Property<int>("PersonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonTypeId"));

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ClientOption")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("PersonTypeId");

                    b.HasIndex("ClientId");

                    b.ToTable("PersonTypes");

                    b.HasData(
                        new
                        {
                            PersonTypeId = 1,
                            ClientOption = false,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Employee",
                            EnteredBy = "System",
                            Name = "Employee"
                        },
                        new
                        {
                            PersonTypeId = 2,
                            ClientOption = false,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Contractor",
                            EnteredBy = "System",
                            Name = "Contractor"
                        },
                        new
                        {
                            PersonTypeId = 3,
                            ClientOption = false,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Customer",
                            EnteredBy = "System",
                            Name = "Customer"
                        },
                        new
                        {
                            PersonTypeId = 4,
                            ClientOption = false,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Vendor",
                            EnteredBy = "System",
                            Name = "Vendor"
                        });
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.Phone", b =>
                {
                    b.Property<Guid>("PhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Extension")
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<int>("PhoneTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("PhoneTypeId1")
                        .HasColumnType("integer");

                    b.HasKey("PhoneId");

                    b.HasIndex("PhoneTypeId");

                    b.HasIndex("PhoneTypeId1");

                    b.ToTable("Phones");

                    b.HasData(
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000101"),
                            Extension = "3363",
                            PhoneNumber = "733-226-2129",
                            PhoneTypeId = 3
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000102"),
                            Extension = "3315",
                            PhoneNumber = "778-561-2562",
                            PhoneTypeId = 4
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000103"),
                            PhoneNumber = "603-387-4428",
                            PhoneTypeId = 2
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000104"),
                            Extension = "1810",
                            PhoneNumber = "228-831-6194",
                            PhoneTypeId = 2
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000105"),
                            PhoneNumber = "763-833-5859",
                            PhoneTypeId = 1
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000106"),
                            Extension = "1373",
                            PhoneNumber = "318-914-7232",
                            PhoneTypeId = 3
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000107"),
                            PhoneNumber = "446-624-8388",
                            PhoneTypeId = 1
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000108"),
                            Extension = "1459",
                            PhoneNumber = "843-772-4460",
                            PhoneTypeId = 1
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000109"),
                            PhoneNumber = "824-663-2036",
                            PhoneTypeId = 2
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000110"),
                            PhoneNumber = "431-682-2292",
                            PhoneTypeId = 1
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000111"),
                            PhoneNumber = "612-145-4782",
                            PhoneTypeId = 4
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000112"),
                            Extension = "7462",
                            PhoneNumber = "374-111-4286",
                            PhoneTypeId = 2
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000113"),
                            PhoneNumber = "256-517-1108",
                            PhoneTypeId = 4
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000114"),
                            Extension = "1027",
                            PhoneNumber = "610-549-1080",
                            PhoneTypeId = 5
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000115"),
                            PhoneNumber = "250-688-1310",
                            PhoneTypeId = 5
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000116"),
                            PhoneNumber = "568-437-6548",
                            PhoneTypeId = 1
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000117"),
                            PhoneNumber = "313-492-8129",
                            PhoneTypeId = 3
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000118"),
                            Extension = "8934",
                            PhoneNumber = "437-915-6280",
                            PhoneTypeId = 4
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000119"),
                            Extension = "5068",
                            PhoneNumber = "965-399-7395",
                            PhoneTypeId = 1
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000120"),
                            Extension = "6324",
                            PhoneNumber = "466-797-2336",
                            PhoneTypeId = 1
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000121"),
                            PhoneNumber = "609-987-7895",
                            PhoneTypeId = 4
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000122"),
                            Extension = "4108",
                            PhoneNumber = "431-596-9907",
                            PhoneTypeId = 4
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000123"),
                            Extension = "2944",
                            PhoneNumber = "942-124-2977",
                            PhoneTypeId = 2
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000124"),
                            Extension = "1954",
                            PhoneNumber = "673-479-1843",
                            PhoneTypeId = 5
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000125"),
                            Extension = "1378",
                            PhoneNumber = "456-391-7759",
                            PhoneTypeId = 5
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000126"),
                            PhoneNumber = "871-905-3142",
                            PhoneTypeId = 5
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000127"),
                            Extension = "3675",
                            PhoneNumber = "423-590-6709",
                            PhoneTypeId = 4
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000128"),
                            PhoneNumber = "346-126-3077",
                            PhoneTypeId = 5
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000129"),
                            Extension = "6039",
                            PhoneNumber = "824-221-8949",
                            PhoneTypeId = 1
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000130"),
                            PhoneNumber = "644-740-2097",
                            PhoneTypeId = 3
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000131"),
                            PhoneNumber = "903-499-4133",
                            PhoneTypeId = 5
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000132"),
                            Extension = "1025",
                            PhoneNumber = "633-952-8292",
                            PhoneTypeId = 1
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000133"),
                            PhoneNumber = "345-945-7480",
                            PhoneTypeId = 3
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000134"),
                            PhoneNumber = "519-212-9195",
                            PhoneTypeId = 5
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000135"),
                            PhoneNumber = "337-400-5879",
                            PhoneTypeId = 4
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000136"),
                            PhoneNumber = "857-771-3524",
                            PhoneTypeId = 2
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000137"),
                            Extension = "3493",
                            PhoneNumber = "842-322-8991",
                            PhoneTypeId = 4
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000138"),
                            PhoneNumber = "382-849-6759",
                            PhoneTypeId = 1
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000139"),
                            PhoneNumber = "843-891-8008",
                            PhoneTypeId = 5
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000140"),
                            PhoneNumber = "572-900-9721",
                            PhoneTypeId = 1
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000141"),
                            Extension = "8253",
                            PhoneNumber = "368-670-5507",
                            PhoneTypeId = 4
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000142"),
                            PhoneNumber = "477-568-7485",
                            PhoneTypeId = 2
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000143"),
                            Extension = "1501",
                            PhoneNumber = "830-622-2786",
                            PhoneTypeId = 5
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000144"),
                            Extension = "8937",
                            PhoneNumber = "371-381-2543",
                            PhoneTypeId = 2
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000145"),
                            PhoneNumber = "575-430-5083",
                            PhoneTypeId = 4
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000146"),
                            Extension = "9441",
                            PhoneNumber = "998-419-8708",
                            PhoneTypeId = 2
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000147"),
                            Extension = "5239",
                            PhoneNumber = "673-650-4483",
                            PhoneTypeId = 5
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000148"),
                            PhoneNumber = "903-380-9273",
                            PhoneTypeId = 5
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000149"),
                            PhoneNumber = "213-368-6221",
                            PhoneTypeId = 1
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000150"),
                            Extension = "9464",
                            PhoneNumber = "528-708-6899",
                            PhoneTypeId = 5
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000151"),
                            Extension = "7167",
                            PhoneNumber = "801-127-4066",
                            PhoneTypeId = 4
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000152"),
                            PhoneNumber = "616-428-4094",
                            PhoneTypeId = 2
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000153"),
                            Extension = "2223",
                            PhoneNumber = "714-644-3896",
                            PhoneTypeId = 4
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000154"),
                            Extension = "6213",
                            PhoneNumber = "873-361-9809",
                            PhoneTypeId = 2
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000155"),
                            Extension = "9502",
                            PhoneNumber = "480-239-2648",
                            PhoneTypeId = 4
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000156"),
                            PhoneNumber = "344-689-2789",
                            PhoneTypeId = 4
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000157"),
                            PhoneNumber = "887-420-6537",
                            PhoneTypeId = 3
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000158"),
                            PhoneNumber = "356-810-5988",
                            PhoneTypeId = 3
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000159"),
                            Extension = "3801",
                            PhoneNumber = "528-688-9771",
                            PhoneTypeId = 4
                        },
                        new
                        {
                            PhoneId = new Guid("00000000-0000-0000-0000-000000000160"),
                            PhoneNumber = "631-830-7243",
                            PhoneTypeId = 2
                        });
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.PhoneType", b =>
                {
                    b.Property<int>("PhoneTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PhoneTypeId"));

                    b.Property<string>("ClientId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<bool>("ClientOption")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("PhoneTypeId");

                    b.ToTable("PhoneTypes");

                    b.HasData(
                        new
                        {
                            PhoneTypeId = 1,
                            ClientOption = false,
                            Description = "Home phone number",
                            Name = "Home"
                        },
                        new
                        {
                            PhoneTypeId = 2,
                            ClientOption = false,
                            Description = "Work phone number",
                            Name = "Work"
                        },
                        new
                        {
                            PhoneTypeId = 3,
                            ClientOption = false,
                            Description = "Mobile phone number",
                            Name = "Mobile"
                        },
                        new
                        {
                            PhoneTypeId = 4,
                            ClientOption = false,
                            Description = "Fax number",
                            Name = "Fax"
                        },
                        new
                        {
                            PhoneTypeId = 5,
                            ClientOption = false,
                            Description = "Emergency contact number",
                            Name = "Emergency"
                        });
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RaceId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("EnteredBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("RaceId");

                    b.ToTable("Races");

                    b.HasData(
                        new
                        {
                            RaceId = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "White",
                            EnteredBy = "System",
                            Name = "White"
                        },
                        new
                        {
                            RaceId = 2,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Black or African American",
                            EnteredBy = "System",
                            Name = "Black or African American"
                        },
                        new
                        {
                            RaceId = 3,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Asian",
                            EnteredBy = "System",
                            Name = "Asian"
                        },
                        new
                        {
                            RaceId = 4,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Native American or Alaska Native",
                            EnteredBy = "System",
                            Name = "Native American"
                        },
                        new
                        {
                            RaceId = 5,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Native Hawaiian or Other Pacific Islander",
                            EnteredBy = "System",
                            Name = "Pacific Islander"
                        },
                        new
                        {
                            RaceId = 6,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Other/Unspecified",
                            EnteredBy = "System",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StateId"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("StateId");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            StateId = 1,
                            Abbreviation = "AL",
                            Name = "Alabama"
                        },
                        new
                        {
                            StateId = 2,
                            Abbreviation = "AK",
                            Name = "Alaska"
                        },
                        new
                        {
                            StateId = 3,
                            Abbreviation = "AZ",
                            Name = "Arizona"
                        },
                        new
                        {
                            StateId = 4,
                            Abbreviation = "AR",
                            Name = "Arkansas"
                        },
                        new
                        {
                            StateId = 5,
                            Abbreviation = "CA",
                            Name = "California"
                        },
                        new
                        {
                            StateId = 6,
                            Abbreviation = "CO",
                            Name = "Colorado"
                        },
                        new
                        {
                            StateId = 7,
                            Abbreviation = "CT",
                            Name = "Connecticut"
                        },
                        new
                        {
                            StateId = 8,
                            Abbreviation = "DE",
                            Name = "Delaware"
                        },
                        new
                        {
                            StateId = 9,
                            Abbreviation = "FL",
                            Name = "Florida"
                        },
                        new
                        {
                            StateId = 10,
                            Abbreviation = "GA",
                            Name = "Georgia"
                        },
                        new
                        {
                            StateId = 11,
                            Abbreviation = "HI",
                            Name = "Hawaii"
                        },
                        new
                        {
                            StateId = 12,
                            Abbreviation = "ID",
                            Name = "Idaho"
                        },
                        new
                        {
                            StateId = 13,
                            Abbreviation = "IL",
                            Name = "Illinois"
                        },
                        new
                        {
                            StateId = 14,
                            Abbreviation = "IN",
                            Name = "Indiana"
                        },
                        new
                        {
                            StateId = 15,
                            Abbreviation = "IA",
                            Name = "Iowa"
                        },
                        new
                        {
                            StateId = 16,
                            Abbreviation = "KS",
                            Name = "Kansas"
                        },
                        new
                        {
                            StateId = 17,
                            Abbreviation = "KY",
                            Name = "Kentucky"
                        },
                        new
                        {
                            StateId = 18,
                            Abbreviation = "LA",
                            Name = "Louisiana"
                        },
                        new
                        {
                            StateId = 19,
                            Abbreviation = "ME",
                            Name = "Maine"
                        },
                        new
                        {
                            StateId = 20,
                            Abbreviation = "MD",
                            Name = "Maryland"
                        },
                        new
                        {
                            StateId = 21,
                            Abbreviation = "MA",
                            Name = "Massachusetts"
                        },
                        new
                        {
                            StateId = 22,
                            Abbreviation = "MI",
                            Name = "Michigan"
                        },
                        new
                        {
                            StateId = 23,
                            Abbreviation = "MN",
                            Name = "Minnesota"
                        },
                        new
                        {
                            StateId = 24,
                            Abbreviation = "MS",
                            Name = "Mississippi"
                        },
                        new
                        {
                            StateId = 25,
                            Abbreviation = "MO",
                            Name = "Missouri"
                        },
                        new
                        {
                            StateId = 26,
                            Abbreviation = "MT",
                            Name = "Montana"
                        },
                        new
                        {
                            StateId = 27,
                            Abbreviation = "NE",
                            Name = "Nebraska"
                        },
                        new
                        {
                            StateId = 28,
                            Abbreviation = "NV",
                            Name = "Nevada"
                        },
                        new
                        {
                            StateId = 29,
                            Abbreviation = "NH",
                            Name = "New Hampshire"
                        },
                        new
                        {
                            StateId = 30,
                            Abbreviation = "NJ",
                            Name = "New Jersey"
                        },
                        new
                        {
                            StateId = 31,
                            Abbreviation = "NM",
                            Name = "New Mexico"
                        },
                        new
                        {
                            StateId = 32,
                            Abbreviation = "NY",
                            Name = "New York"
                        },
                        new
                        {
                            StateId = 33,
                            Abbreviation = "NC",
                            Name = "North Carolina"
                        },
                        new
                        {
                            StateId = 34,
                            Abbreviation = "ND",
                            Name = "North Dakota"
                        },
                        new
                        {
                            StateId = 35,
                            Abbreviation = "OH",
                            Name = "Ohio"
                        },
                        new
                        {
                            StateId = 36,
                            Abbreviation = "OK",
                            Name = "Oklahoma"
                        },
                        new
                        {
                            StateId = 37,
                            Abbreviation = "OR",
                            Name = "Oregon"
                        },
                        new
                        {
                            StateId = 38,
                            Abbreviation = "PA",
                            Name = "Pennsylvania"
                        },
                        new
                        {
                            StateId = 39,
                            Abbreviation = "RI",
                            Name = "Rhode Island"
                        },
                        new
                        {
                            StateId = 40,
                            Abbreviation = "SC",
                            Name = "South Carolina"
                        },
                        new
                        {
                            StateId = 41,
                            Abbreviation = "SD",
                            Name = "South Dakota"
                        },
                        new
                        {
                            StateId = 42,
                            Abbreviation = "TN",
                            Name = "Tennessee"
                        },
                        new
                        {
                            StateId = 43,
                            Abbreviation = "TX",
                            Name = "Texas"
                        },
                        new
                        {
                            StateId = 44,
                            Abbreviation = "UT",
                            Name = "Utah"
                        },
                        new
                        {
                            StateId = 45,
                            Abbreviation = "VT",
                            Name = "Vermont"
                        },
                        new
                        {
                            StateId = 46,
                            Abbreviation = "VA",
                            Name = "Virginia"
                        },
                        new
                        {
                            StateId = 47,
                            Abbreviation = "WA",
                            Name = "Washington"
                        },
                        new
                        {
                            StateId = 48,
                            Abbreviation = "WV",
                            Name = "West Virginia"
                        },
                        new
                        {
                            StateId = 49,
                            Abbreviation = "WI",
                            Name = "Wisconsin"
                        },
                        new
                        {
                            StateId = 50,
                            Abbreviation = "WY",
                            Name = "Wyoming"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.Address", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.AddressType", null)
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaggiesPlaygroundApi.Models.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId1");

                    b.HasOne("MaggiesPlaygroundApi.Models.State", null)
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaggiesPlaygroundApi.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId1");

                    b.Navigation("AddressType");

                    b.Navigation("State");
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.Client", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.ClientType", null)
                        .WithMany()
                        .HasForeignKey("ClientTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.ClientAddress", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaggiesPlaygroundApi.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.ClientEmail", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaggiesPlaygroundApi.Models.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Email");
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.ClientPhone", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaggiesPlaygroundApi.Models.Phone", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.Email", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.EmailType", null)
                        .WithMany()
                        .HasForeignKey("EmailTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaggiesPlaygroundApi.Models.EmailType", "EmailType")
                        .WithMany()
                        .HasForeignKey("EmailTypeId1");

                    b.Navigation("EmailType");
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.Person", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaggiesPlaygroundApi.Models.PersonType", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaggiesPlaygroundApi.Models.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("PersonType");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.PersonAddress", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaggiesPlaygroundApi.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.PersonEmail", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaggiesPlaygroundApi.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Email");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.PersonPhone", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaggiesPlaygroundApi.Models.Phone", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.PersonType", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MaggiesPlaygroundApi.Models.Phone", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.PhoneType", null)
                        .WithMany()
                        .HasForeignKey("PhoneTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaggiesPlaygroundApi.Models.PhoneType", "PhoneType")
                        .WithMany()
                        .HasForeignKey("PhoneTypeId1");

                    b.Navigation("PhoneType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaggiesPlaygroundApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MaggiesPlaygroundApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
